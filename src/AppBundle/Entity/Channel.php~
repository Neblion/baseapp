<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use AppBundle\Util\CreateUpdateTrait;

/**
 * Channel
 *
 * @ORM\Table(name="channel")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\ChannelRepository")
 */
class Channel
{
    use CreateUpdateTrait;
    
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    
    /**
     * @ORM\ManyToOne(targetEntity="Account", inversedBy="channels")
     * @ORM\JoinColumn(name="account_id", referencedColumnName="id", nullable=false)
     */
    protected $account;
    
    /**
     * @ORM\ManyToMany(targetEntity="Feed", inversedBy="channels")
     * @ORM\JoinTable(name="channels_feeds")
     */
    private $feeds;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=100)
     * @Assert\NotBlank()
     * @Assert\Length(min = 5)
     */
    private $title;
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->feeds = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     *
     * @return Channel
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     *
     * @return Channel
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     *
     * @return Channel
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Add feed
     *
     * @param \AppBundle\Entity\Feed $feed
     *
     * @return Channel
     */
    public function addFeed(\AppBundle\Entity\Feed $feed)
    {
        $this->feeds[] = $feed;

        return $this;
    }

    /**
     * Remove feed
     *
     * @param \AppBundle\Entity\Feed $feed
     */
    public function removeFeed(\AppBundle\Entity\Feed $feed)
    {
        $this->feeds->removeElement($feed);
    }

    /**
     * Get feeds
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFeeds()
    {
        return $this->feeds;
    }

    /**
     * Set creator
     *
     * @param \AppBundle\Entity\Account $creator
     *
     * @return Channel
     */
    public function setCreator(\AppBundle\Entity\Account $creator = null)
    {
        $this->creator = $creator;

        return $this;
    }

    /**
     * Set updater
     *
     * @param \AppBundle\Entity\Account $updater
     *
     * @return Channel
     */
    public function setUpdater(\AppBundle\Entity\Account $updater = null)
    {
        $this->updater = $updater;

        return $this;
    }

    /**
     * Set account
     *
     * @param \AppBundle\Entity\Account $account
     *
     * @return Channel
     */
    public function setAccount(\AppBundle\Entity\Account $account)
    {
        $this->account = $account;

        return $this;
    }

    /**
     * Get account
     *
     * @return \AppBundle\Entity\Account
     */
    public function getAccount()
    {
        return $this->account;
    }
}
